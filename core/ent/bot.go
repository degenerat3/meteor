// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/degenerat3/meteor/core/ent/bot"
	"github.com/degenerat3/meteor/core/ent/host"
	"entgo.io/ent/dialect/sql"
)

// Bot is the model entity for the Bot schema.
type Bot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Interval holds the value of the "interval" field.
	Interval int `json:"interval,omitempty"`
	// Delta holds the value of the "delta" field.
	Delta int `json:"delta,omitempty"`
	// LastSeen holds the value of the "lastSeen" field.
	LastSeen int `json:"lastSeen,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BotQuery when eager-loading is set.
	Edges     BotEdges `json:"edges"`
	host_bots *int
}

// BotEdges holds the relations/edges for other nodes in the graph.
type BotEdges struct {
	// Infecting holds the value of the infecting edge.
	Infecting *Host `json:"infecting,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InfectingOrErr returns the Infecting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BotEdges) InfectingOrErr() (*Host, error) {
	if e.loadedTypes[0] {
		if e.Infecting == nil {
			// The edge infecting was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: host.Label}
		}
		return e.Infecting, nil
	}
	return nil, &NotLoadedError{edge: "infecting"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bot) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bot.FieldID, bot.FieldInterval, bot.FieldDelta, bot.FieldLastSeen:
			values[i] = &sql.NullInt64{}
		case bot.FieldUUID:
			values[i] = &sql.NullString{}
		case bot.ForeignKeys[0]: // host_bots
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bot fields.
func (b *Bot) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bot.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				b.UUID = value.String
			}
		case bot.FieldInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				b.Interval = int(value.Int64)
			}
		case bot.FieldDelta:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delta", values[i])
			} else if value.Valid {
				b.Delta = int(value.Int64)
			}
		case bot.FieldLastSeen:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lastSeen", values[i])
			} else if value.Valid {
				b.LastSeen = int(value.Int64)
			}
		case bot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_bots", value)
			} else if value.Valid {
				b.host_bots = new(int)
				*b.host_bots = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryInfecting queries the "infecting" edge of the Bot entity.
func (b *Bot) QueryInfecting() *HostQuery {
	return (&BotClient{config: b.config}).QueryInfecting(b)
}

// Update returns a builder for updating this Bot.
// Note that you need to call Bot.Unwrap() before calling this method if this Bot
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bot) Update() *BotUpdateOne {
	return (&BotClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bot) Unwrap() *Bot {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bot is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bot) String() string {
	var builder strings.Builder
	builder.WriteString("Bot(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(b.UUID)
	builder.WriteString(", interval=")
	builder.WriteString(fmt.Sprintf("%v", b.Interval))
	builder.WriteString(", delta=")
	builder.WriteString(fmt.Sprintf("%v", b.Delta))
	builder.WriteString(", lastSeen=")
	builder.WriteString(fmt.Sprintf("%v", b.LastSeen))
	builder.WriteByte(')')
	return builder.String()
}

// Bots is a parsable slice of Bot.
type Bots []*Bot

func (b Bots) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
