// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/degenerat3/meteor/core/ent/action"
	"github.com/degenerat3/meteor/core/ent/bot"
	"github.com/degenerat3/meteor/core/ent/group"
	"github.com/degenerat3/meteor/core/ent/host"
	"github.com/degenerat3/meteor/core/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where adds a new predicate for the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.predicates = append(hu.mutation.predicates, ps...)
	return hu
}

// SetHostname sets the "hostname" field.
func (hu *HostUpdate) SetHostname(s string) *HostUpdate {
	hu.mutation.SetHostname(s)
	return hu
}

// SetInterface sets the "interface" field.
func (hu *HostUpdate) SetInterface(s string) *HostUpdate {
	hu.mutation.SetInterface(s)
	return hu
}

// SetLastSeen sets the "lastSeen" field.
func (hu *HostUpdate) SetLastSeen(i int) *HostUpdate {
	hu.mutation.ResetLastSeen()
	hu.mutation.SetLastSeen(i)
	return hu
}

// SetNillableLastSeen sets the "lastSeen" field if the given value is not nil.
func (hu *HostUpdate) SetNillableLastSeen(i *int) *HostUpdate {
	if i != nil {
		hu.SetLastSeen(*i)
	}
	return hu
}

// AddLastSeen adds i to the "lastSeen" field.
func (hu *HostUpdate) AddLastSeen(i int) *HostUpdate {
	hu.mutation.AddLastSeen(i)
	return hu
}

// AddBotIDs adds the "bots" edge to the Bot entity by IDs.
func (hu *HostUpdate) AddBotIDs(ids ...int) *HostUpdate {
	hu.mutation.AddBotIDs(ids...)
	return hu
}

// AddBots adds the "bots" edges to the Bot entity.
func (hu *HostUpdate) AddBots(b ...*Bot) *HostUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hu.AddBotIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the Action entity by IDs.
func (hu *HostUpdate) AddActionIDs(ids ...int) *HostUpdate {
	hu.mutation.AddActionIDs(ids...)
	return hu
}

// AddActions adds the "actions" edges to the Action entity.
func (hu *HostUpdate) AddActions(a ...*Action) *HostUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hu.AddActionIDs(ids...)
}

// AddMemberIDs adds the "member" edge to the Group entity by IDs.
func (hu *HostUpdate) AddMemberIDs(ids ...int) *HostUpdate {
	hu.mutation.AddMemberIDs(ids...)
	return hu
}

// AddMember adds the "member" edges to the Group entity.
func (hu *HostUpdate) AddMember(g ...*Group) *HostUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return hu.AddMemberIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearBots clears all "bots" edges to the Bot entity.
func (hu *HostUpdate) ClearBots() *HostUpdate {
	hu.mutation.ClearBots()
	return hu
}

// RemoveBotIDs removes the "bots" edge to Bot entities by IDs.
func (hu *HostUpdate) RemoveBotIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveBotIDs(ids...)
	return hu
}

// RemoveBots removes "bots" edges to Bot entities.
func (hu *HostUpdate) RemoveBots(b ...*Bot) *HostUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hu.RemoveBotIDs(ids...)
}

// ClearActions clears all "actions" edges to the Action entity.
func (hu *HostUpdate) ClearActions() *HostUpdate {
	hu.mutation.ClearActions()
	return hu
}

// RemoveActionIDs removes the "actions" edge to Action entities by IDs.
func (hu *HostUpdate) RemoveActionIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveActionIDs(ids...)
	return hu
}

// RemoveActions removes "actions" edges to Action entities.
func (hu *HostUpdate) RemoveActions(a ...*Action) *HostUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return hu.RemoveActionIDs(ids...)
}

// ClearMember clears all "member" edges to the Group entity.
func (hu *HostUpdate) ClearMember() *HostUpdate {
	hu.mutation.ClearMember()
	return hu
}

// RemoveMemberIDs removes the "member" edge to Group entities by IDs.
func (hu *HostUpdate) RemoveMemberIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveMemberIDs(ids...)
	return hu
}

// RemoveMember removes "member" edges to Group entities.
func (hu *HostUpdate) RemoveMember(g ...*Group) *HostUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return hu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   host.Table,
			Columns: host.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: host.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
	}
	if value, ok := hu.mutation.Interface(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldInterface,
		})
	}
	if value, ok := hu.mutation.LastSeen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastSeen,
		})
	}
	if value, ok := hu.mutation.AddedLastSeen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastSeen,
		})
	}
	if hu.mutation.BotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.BotsTable,
			Columns: []string{host.BotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedBotsIDs(); len(nodes) > 0 && !hu.mutation.BotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.BotsTable,
			Columns: []string{host.BotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.BotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.BotsTable,
			Columns: []string{host.BotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ActionsTable,
			Columns: []string{host.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedActionsIDs(); len(nodes) > 0 && !hu.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ActionsTable,
			Columns: []string{host.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ActionsTable,
			Columns: []string{host.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.MemberTable,
			Columns: host.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedMemberIDs(); len(nodes) > 0 && !hu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.MemberTable,
			Columns: host.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.MemberTable,
			Columns: host.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// SetHostname sets the "hostname" field.
func (huo *HostUpdateOne) SetHostname(s string) *HostUpdateOne {
	huo.mutation.SetHostname(s)
	return huo
}

// SetInterface sets the "interface" field.
func (huo *HostUpdateOne) SetInterface(s string) *HostUpdateOne {
	huo.mutation.SetInterface(s)
	return huo
}

// SetLastSeen sets the "lastSeen" field.
func (huo *HostUpdateOne) SetLastSeen(i int) *HostUpdateOne {
	huo.mutation.ResetLastSeen()
	huo.mutation.SetLastSeen(i)
	return huo
}

// SetNillableLastSeen sets the "lastSeen" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableLastSeen(i *int) *HostUpdateOne {
	if i != nil {
		huo.SetLastSeen(*i)
	}
	return huo
}

// AddLastSeen adds i to the "lastSeen" field.
func (huo *HostUpdateOne) AddLastSeen(i int) *HostUpdateOne {
	huo.mutation.AddLastSeen(i)
	return huo
}

// AddBotIDs adds the "bots" edge to the Bot entity by IDs.
func (huo *HostUpdateOne) AddBotIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddBotIDs(ids...)
	return huo
}

// AddBots adds the "bots" edges to the Bot entity.
func (huo *HostUpdateOne) AddBots(b ...*Bot) *HostUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return huo.AddBotIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the Action entity by IDs.
func (huo *HostUpdateOne) AddActionIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddActionIDs(ids...)
	return huo
}

// AddActions adds the "actions" edges to the Action entity.
func (huo *HostUpdateOne) AddActions(a ...*Action) *HostUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return huo.AddActionIDs(ids...)
}

// AddMemberIDs adds the "member" edge to the Group entity by IDs.
func (huo *HostUpdateOne) AddMemberIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddMemberIDs(ids...)
	return huo
}

// AddMember adds the "member" edges to the Group entity.
func (huo *HostUpdateOne) AddMember(g ...*Group) *HostUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return huo.AddMemberIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearBots clears all "bots" edges to the Bot entity.
func (huo *HostUpdateOne) ClearBots() *HostUpdateOne {
	huo.mutation.ClearBots()
	return huo
}

// RemoveBotIDs removes the "bots" edge to Bot entities by IDs.
func (huo *HostUpdateOne) RemoveBotIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveBotIDs(ids...)
	return huo
}

// RemoveBots removes "bots" edges to Bot entities.
func (huo *HostUpdateOne) RemoveBots(b ...*Bot) *HostUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return huo.RemoveBotIDs(ids...)
}

// ClearActions clears all "actions" edges to the Action entity.
func (huo *HostUpdateOne) ClearActions() *HostUpdateOne {
	huo.mutation.ClearActions()
	return huo
}

// RemoveActionIDs removes the "actions" edge to Action entities by IDs.
func (huo *HostUpdateOne) RemoveActionIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveActionIDs(ids...)
	return huo
}

// RemoveActions removes "actions" edges to Action entities.
func (huo *HostUpdateOne) RemoveActions(a ...*Action) *HostUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return huo.RemoveActionIDs(ids...)
}

// ClearMember clears all "member" edges to the Group entity.
func (huo *HostUpdateOne) ClearMember() *HostUpdateOne {
	huo.mutation.ClearMember()
	return huo
}

// RemoveMemberIDs removes the "member" edge to Group entities by IDs.
func (huo *HostUpdateOne) RemoveMemberIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveMemberIDs(ids...)
	return huo
}

// RemoveMember removes "member" edges to Group entities.
func (huo *HostUpdateOne) RemoveMember(g ...*Group) *HostUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return huo.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	var (
		err  error
		node *Host
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   host.Table,
			Columns: host.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: host.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Host.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldHostname,
		})
	}
	if value, ok := huo.mutation.Interface(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: host.FieldInterface,
		})
	}
	if value, ok := huo.mutation.LastSeen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastSeen,
		})
	}
	if value, ok := huo.mutation.AddedLastSeen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: host.FieldLastSeen,
		})
	}
	if huo.mutation.BotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.BotsTable,
			Columns: []string{host.BotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedBotsIDs(); len(nodes) > 0 && !huo.mutation.BotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.BotsTable,
			Columns: []string{host.BotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.BotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.BotsTable,
			Columns: []string{host.BotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ActionsTable,
			Columns: []string{host.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedActionsIDs(); len(nodes) > 0 && !huo.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ActionsTable,
			Columns: []string{host.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.ActionsTable,
			Columns: []string{host.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: action.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.MemberTable,
			Columns: host.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedMemberIDs(); len(nodes) > 0 && !huo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.MemberTable,
			Columns: host.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   host.MemberTable,
			Columns: host.MemberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
