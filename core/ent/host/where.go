// Code generated by entc, DO NOT EDIT.

package host

import (
	"github.com/degenerat3/meteor/core/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// Interface applies equality check predicate on the "interface" field. It's identical to InterfaceEQ.
func Interface(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterface), v))
	})
}

// LastSeen applies equality check predicate on the "lastSeen" field. It's identical to LastSeenEQ.
func LastSeen(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSeen), v))
	})
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// InterfaceEQ applies the EQ predicate on the "interface" field.
func InterfaceEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterface), v))
	})
}

// InterfaceNEQ applies the NEQ predicate on the "interface" field.
func InterfaceNEQ(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterface), v))
	})
}

// InterfaceIn applies the In predicate on the "interface" field.
func InterfaceIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterface), v...))
	})
}

// InterfaceNotIn applies the NotIn predicate on the "interface" field.
func InterfaceNotIn(vs ...string) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterface), v...))
	})
}

// InterfaceGT applies the GT predicate on the "interface" field.
func InterfaceGT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterface), v))
	})
}

// InterfaceGTE applies the GTE predicate on the "interface" field.
func InterfaceGTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterface), v))
	})
}

// InterfaceLT applies the LT predicate on the "interface" field.
func InterfaceLT(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterface), v))
	})
}

// InterfaceLTE applies the LTE predicate on the "interface" field.
func InterfaceLTE(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterface), v))
	})
}

// InterfaceContains applies the Contains predicate on the "interface" field.
func InterfaceContains(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInterface), v))
	})
}

// InterfaceHasPrefix applies the HasPrefix predicate on the "interface" field.
func InterfaceHasPrefix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInterface), v))
	})
}

// InterfaceHasSuffix applies the HasSuffix predicate on the "interface" field.
func InterfaceHasSuffix(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInterface), v))
	})
}

// InterfaceEqualFold applies the EqualFold predicate on the "interface" field.
func InterfaceEqualFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInterface), v))
	})
}

// InterfaceContainsFold applies the ContainsFold predicate on the "interface" field.
func InterfaceContainsFold(v string) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInterface), v))
	})
}

// LastSeenEQ applies the EQ predicate on the "lastSeen" field.
func LastSeenEQ(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSeen), v))
	})
}

// LastSeenNEQ applies the NEQ predicate on the "lastSeen" field.
func LastSeenNEQ(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastSeen), v))
	})
}

// LastSeenIn applies the In predicate on the "lastSeen" field.
func LastSeenIn(vs ...int) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastSeen), v...))
	})
}

// LastSeenNotIn applies the NotIn predicate on the "lastSeen" field.
func LastSeenNotIn(vs ...int) predicate.Host {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Host(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastSeen), v...))
	})
}

// LastSeenGT applies the GT predicate on the "lastSeen" field.
func LastSeenGT(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastSeen), v))
	})
}

// LastSeenGTE applies the GTE predicate on the "lastSeen" field.
func LastSeenGTE(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastSeen), v))
	})
}

// LastSeenLT applies the LT predicate on the "lastSeen" field.
func LastSeenLT(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastSeen), v))
	})
}

// LastSeenLTE applies the LTE predicate on the "lastSeen" field.
func LastSeenLTE(v int) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastSeen), v))
	})
}

// HasBots applies the HasEdge predicate on the "bots" edge.
func HasBots() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BotsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BotsTable, BotsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBotsWith applies the HasEdge predicate on the "bots" edge with a given conditions (other predicates).
func HasBotsWith(preds ...predicate.Bot) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BotsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BotsTable, BotsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActions applies the HasEdge predicate on the "actions" edge.
func HasActions() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActionsTable, ActionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionsWith applies the HasEdge predicate on the "actions" edge with a given conditions (other predicates).
func HasActionsWith(preds ...predicate.Action) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActionsTable, ActionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MemberTable, MemberPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Group) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MemberTable, MemberPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		p(s.Not())
	})
}
